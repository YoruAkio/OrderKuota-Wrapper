name: Deploy Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-gh-pages:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate HTML documentation
        run: bun run docs:generate:html

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Deploy to gh-pages branch
        run: |
          SOURCE_HTML_DIR="generated-temp/github-pages-html"
          TARGET_BRANCH="gh-pages"
          
          if [ ! -d "$SOURCE_HTML_DIR" ] || [ -z "$(ls -A $SOURCE_HTML_DIR)" ]; then
            echo "Error: TypeDoc HTML output directory '$SOURCE_HTML_DIR' not found or is empty."
            exit 1
          fi
          
          if git show-ref --verify --quiet "refs/remotes/origin/$TARGET_BRANCH"; then
            git fetch origin "$TARGET_BRANCH"
            git checkout -B "$TARGET_BRANCH" "origin/$TARGET_BRANCH"
          else
            git checkout --orphan "$TARGET_BRANCH"
          fi
          
          git rm -rf . 2>/dev/null || true
          cp -R "$SOURCE_HTML_DIR"/* .
          git add .
          git commit -m "Deploy documentation to gh-pages" || echo "No changes to commit"
          git push origin "$TARGET_BRANCH" --force

  deploy-hashnode-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate Markdown documentation
        run: bun run docs:generate:markdown

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Deploy to doc-hashnode branch
        run: |
          SOURCE_MARKDOWN_DIR="generated-temp/hashnode-markdown"
          TARGET_BRANCH="doc-hashnode"
          
          if [ ! -d "$SOURCE_MARKDOWN_DIR" ] || [ -z "$(ls -A $SOURCE_MARKDOWN_DIR)" ]; then
            echo "Error: TypeDoc Markdown output directory '$SOURCE_MARKDOWN_DIR' not found or is empty."
            exit 1
          fi
          
          if git show-ref --verify --quiet "refs/remotes/origin/$TARGET_BRANCH"; then
            git fetch origin "$TARGET_BRANCH"
            git checkout -B "$TARGET_BRANCH" "origin/$TARGET_BRANCH"
          else
            git checkout --orphan "$TARGET_BRANCH"
          fi
          
          git rm -rf . 2>/dev/null || true
          cp -R "$SOURCE_MARKDOWN_DIR"/* .
          
          cat > README.md << 'EOF'
          # Documentation Branch for Hashnode
          
          This branch contains auto-generated markdown documentation for Hashnode.
          EOF
          
          git add .
          git commit -m "Update Hashnode documentation" || echo "No changes to commit"
          git push origin "$TARGET_BRANCH" --force

      - name: Install hashnode-publish
        run: bun add hashnode-publish

      - name: Publish to Hashnode
        env:
          HASHNODE_PAT: ${{ secrets.HASHNODE_PAT }}
        run: |
          SOURCE_MARKDOWN_DIR="generated-temp/hashnode-markdown"
          
          # Create a simple publish script
          cat > publish-hashnode.js << 'EOF'
          import { HashnodePublisher } from 'hashnode-publish';
          import { readFileSync, readdirSync } from 'fs';
          import { join } from 'path';
          
          const publisher = new HashnodePublisher({
            token: process.env.HASHNODE_PAT
          });
          
          const docsDir = process.argv[2] || 'generated-temp/hashnode-markdown';
          const files = readdirSync(docsDir).filter(f => f.endsWith('.md'));
          
          for (const file of files) {
            const content = readFileSync(join(docsDir, file), 'utf8');
            const title = file.replace('.md', '').replace(/-/g, ' ');
            
            try {
              await publisher.publish({
                title: `OrderKuota API - ${title}`,
                content: content,
                tags: ['api', 'documentation', 'orderkuota', 'nodejs']
              });
              console.log(`Published: ${title}`);
            } catch (error) {
              console.error(`Failed to publish ${title}:`, error);
            }
          }
          EOF
          
          bun run publish-hashnode.js "$SOURCE_MARKDOWN_DIR"