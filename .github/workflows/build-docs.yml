name: Deploy Documentation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-gh-pages:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate HTML documentation
        run: bun run docs:generate:html

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./generated-temp/github-pages-html
          publish_branch: gh-pages
          force_orphan: true

  deploy-hashnode-docs:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Generate Markdown documentation
        run: bun run docs:generate:markdown

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Deploy to doc-hashnode branch
        run: |
          SOURCE_MARKDOWN_DIR="generated-temp/hashnode-markdown"
          TARGET_BRANCH="doc-hashnode"
          
          if [ ! -d "$SOURCE_MARKDOWN_DIR" ] || [ -z "$(ls -A $SOURCE_MARKDOWN_DIR)" ]; then
            echo "Error: TypeDoc Markdown output directory '$SOURCE_MARKDOWN_DIR' not found or is empty."
            exit 1
          fi
          
          echo "Creating temporary directory for deployment..."
          TEMP_DIR=$(mktemp -d)
          cp -R "$SOURCE_MARKDOWN_DIR"/* "$TEMP_DIR/"
          
          echo "# OrderKuota API Documentation for Hashnode" > "$TEMP_DIR/README.md"
          echo "" >> "$TEMP_DIR/README.md"
          echo "This branch contains auto-generated markdown documentation for Hashnode publishing." >> "$TEMP_DIR/README.md"
          echo "Generated on: $(date)" >> "$TEMP_DIR/README.md"
          
          git fetch origin || true
          
          if git show-ref --verify --quiet "refs/remotes/origin/$TARGET_BRANCH"; then
            echo "Branch $TARGET_BRANCH exists, updating..."
            git checkout -B "$TARGET_BRANCH" "origin/$TARGET_BRANCH" 2>/dev/null || git checkout --orphan "$TARGET_BRANCH"
          else
            echo "Creating new branch $TARGET_BRANCH..."
            git checkout --orphan "$TARGET_BRANCH"
          fi
          
          git rm -rf . 2>/dev/null || true
          cp -R "$TEMP_DIR"/* .
          rm -rf "$TEMP_DIR"
          
          git add .
          git commit -m "Update Hashnode documentation - $(date)" || echo "No changes to commit"
          git push origin "$TARGET_BRANCH" --force
          
          git checkout main

      - name: Install hashnode-cli for publishing
        run: npm install -g @hashnode/cli

      - name: Create publish script
        run: |
          cat > publish-hashnode.js << 'EOF'
          import fs from 'fs';
          import path from 'path';
          import { execSync } from 'child_process';
          
          function publishToHashnode() {
            const docsDir = 'generated-temp/hashnode-markdown';
            
            if (!fs.existsSync(docsDir)) {
              console.error('Markdown documentation directory not found');
              return;
            }
            
            const files = fs.readdirSync(docsDir, { recursive: true })
              .filter(f => typeof f === 'string' && f.endsWith('.md') && !f.includes('README.md'))
              .slice(0, 5);
            
            console.log(`Found ${files.length} markdown files to publish`);
            
            if (!process.env.HASHNODE_PAT) {
              console.log('‚ö†Ô∏è  HASHNODE_PAT not available, skipping publish');
              return;
            }
            
            for (const file of files) {
              const filePath = path.join(docsDir, file);
              const content = fs.readFileSync(filePath, 'utf8');
              const fileName = path.basename(file, '.md');
              const title = `OrderKuota API - ${fileName.replace(/-/g, ' ').replace(/([A-Z])/g, ' $1').trim()}`;
              
              console.log(`Publishing: ${title}`);
              
              const tempFile = `temp_${fileName}.md`;
              const frontMatter = `---
          title: "${title}"
          subtitle: "Auto-generated API documentation for OrderKuota"
          tags: ["api", "documentation", "orderkuota", "nodejs", "typescript"]
          publishAs: "public"
          ---
          
          ${content}`;
              
              fs.writeFileSync(tempFile, frontMatter);
              
              try {
                execSync(`npx @hashnode/cli publish ${tempFile}`, {
                  stdio: 'inherit',
                  env: { ...process.env, HASHNODE_TOKEN: process.env.HASHNODE_PAT }
                });
                console.log(`‚úÖ Published: ${title}`);
              } catch (error) {
                console.error(`‚ùå Failed to publish ${title}:`, error.message);
              } finally {
                if (fs.existsSync(tempFile)) {
                  fs.unlinkSync(tempFile);
                }
              }
            }
          }
          
          publishToHashnode();
          EOF

      - name: Publish to Hashnode
        env:
          HASHNODE_PAT: ${{ secrets.HASHNODE_PAT }}
          HASHNODE_TOKEN: ${{ secrets.HASHNODE_PAT }}
        run: |
          if [ -z "$HASHNODE_PAT" ]; then
            echo "‚ö†Ô∏è  HASHNODE_PAT secret not found. Skipping Hashnode publishing."
            exit 0
          fi
          
          echo "üöÄ Publishing documentation to Hashnode..."
          bun run publish-hashnode.js